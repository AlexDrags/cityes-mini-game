'use client';
import './globals.css';
import { Inter } from 'next/font/google';
import { useState, useEffect } from 'react';
import Header from '@/app/components/Header';
import Footer from '@/app/components/Footer';
import RulesInfo from '@/app/components/RulesInfo';
import StartButton from '@/app/components/ui/StartButton';
import WordsDesk from './components/ui/WordsDesk';
import Timer from '@/app/components/ui/Timer';
import SendField from '@/app/components/ui/SendField';
import WinInfo from '@/app//components/WinInfo';
import FailInfo from '@/app//components/FailInfo';

const inter = Inter({ subsets: ['latin'] });

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [mode, setMode] = useState(false);
  const [words, setWords] = useState(['']);
  const [npc, setNpc] = useState(false);
  const [minutes, setMinutes] = useState(1);
  const [seconds, setSeconds] = useState(59);
  const [finishTimer, setFinishTimer] = useState(118);
  useEffect(() => {}, [mode, setMode, words, setWords, npc, setNpc, finishTimer, setFinishTimer]);

  function contentRender() {
    if (finishTimer !== 0) {
      return mode === false ? <RulesInfo /> : <WordsDesk words={words} onSubmit={setWords} />;
    }
    if (finishTimer === 0 && npc !== false) {
      return <WinInfo npc={npc} words={words} />;
    }
    if (finishTimer === 0 && npc === false) {
      return <FailInfo npc={npc} words={words} />;
    }
  }

  return (
    <html lang='ru'>
      <body className={`font-sans bg-grey-200 inline-flex justify-center items-center flex-grow`}>
        <div className=' min-h-fit pb-6 w-full min-w-320 my-0 mx-auto max-w-xl bg-white rounded-2xl shadow'>
          <Header>
            {mode === false ? (
              <div className='flex p-4 border-b-2 border-zinc-100'>
                <h1 className='text-center'>Игра в города на время</h1>
              </div>
            ) : (
              <div className='flex p-4 border-b-4 border-violet-100'>
                <h1 className='mr-auto'>{npc === false ? 'Сейчас ваша очередь' : 'Сейчас очередь соперника'}</h1>
                <Timer
                  minutes={minutes}
                  setMinutes={setMinutes}
                  seconds={seconds}
                  setSeconds={setSeconds}
                  finishTimer={finishTimer}
                  setFinishTimer={setFinishTimer}
                  mode={mode}
                  setMode={setMode}
                />
              </div>
            )}
          </Header>
          <main className='flex'>{contentRender()}</main>
          <Footer>
            {mode === false ? (
              <StartButton
                onClick={setMode}
                mode={mode}
                setMinutes={setMinutes}
                setSeconds={setSeconds}
                setFinishTimer={setFinishTimer}
                words={words}
                onSubmit={setWords}
              />
            ) : (
              <SendField
                words={words}
                onSubmit={setWords}
                queue={npc}
                queueSet={setNpc}
                minutes={minutes}
                setMinutes={setMinutes}
                seconds={seconds}
                setSeconds={setSeconds}
                finishTimer={finishTimer}
                setFinishTimer={setFinishTimer}
                mode={mode}
                setMode={setMode}
              />
            )}
          </Footer>
        </div>
      </body>
    </html>
  );
}
